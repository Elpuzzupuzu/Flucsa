// src/controllers/userController.js
import { UserService } from '../services/userService.js';

// ===============================
// CORRECCIÃ“N: DeclaraciÃ³n de isProduction
// ===============================
const isProduction = process.env.NODE_ENV === 'production';

// ===============================
// CONFIGURACIÃ“N DE LA COOKIE (CONDICIONALMENTE)
// ===============================
const cookieConfig = {
Â  httpOnly: true,
Â  // En producciÃ³n (HTTPS), 'secure' debe ser true. En desarrollo (HTTP), debe ser false.
Â  secure: isProduction,
Â  // Si 'secure' es true, 'sameSite' debe ser 'None' (requiere secure). En desarrollo, usamos 'Lax'.
Â  sameSite: isProduction ? 'None' : 'Lax',
Â  // En localhost, no establezcas el dominio (undefined). En producciÃ³n, usa el dominio base.
Â  path: '/',
};

export const UserController = {
Â  // ===============================
Â  // Registro de usuario
Â  // ===============================
Â  register: async (req, res) => {
Â  Â  try {
Â  Â  Â  const newUser = await UserService.registerUser(req.body);
Â  Â  Â  res.status(201).json(newUser);
Â  Â  } catch (error) {
Â  Â  Â  // Manejo de errores especÃ­ficos de Supabase/PostgreSQL (ej. llave duplicada)
Â  Â  Â  if (error.code === '23505') {
Â  Â  Â  Â  return res.status(409).json({ error: 'El correo electrÃ³nico ya estÃ¡ registrado.' });
Â  Â  Â  }
Â  Â  Â  res.status(400).json({ error: error.message });
Â  Â  }
Â  },

Â  // ===============================
Â  // Inicio de sesiÃ³n (LOGIN)
Â  // ===============================
Â  login: async (req, res) => {
Â  Â  try {
Â  Â  Â  const { correo, contraseÃ±a } = req.body;

Â  Â  Â  if (!correo || !contraseÃ±a) {
Â  Â  Â  Â  return res.status(400).json({ error: 'Correo y contraseÃ±a son obligatorios' });
Â  Â  Â  }

Â  Â  Â  // El servicio devuelve { user, accessToken, refreshToken, errorType }
Â  Â  Â  const { user, accessToken, refreshToken, errorType } =
Â  Â  Â  Â  await UserService.loginUser(correo, contraseÃ±a);

Â  Â  Â  if (errorType === 'USER_NOT_FOUND') {
Â  Â  Â  Â  return res.status(404).json({ error: 'Usuario no encontrado' });
Â  Â  Â  }

Â  Â  Â  if (errorType === 'INVALID_PASSWORD') {
Â  Â  Â  Â  return res.status(401).json({ error: 'ContraseÃ±a incorrecta' });
Â  Â  Â  }

Â  Â  Â  // 1. CONFIGURAR COOKIE PARA ACCESS TOKEN (5 minutos de persistencia)
Â  Â  Â  res.cookie('accessToken', accessToken, {
Â  Â  Â  Â  ...cookieConfig,
Â  Â  Â  Â  maxAge: 5 * 60 * 1000, // 5 minutos (Persistencia corta)
Â  Â  Â  });

Â  Â  Â  // 2. CONFIGURAR COOKIE PARA REFRESH TOKEN (7 dÃ­as de persistencia)
Â  Â  Â  res.cookie('refreshToken', refreshToken, {
Â  Â  Â  Â  ...cookieConfig,
Â  Â  Â  Â  maxAge: 7 * 24 * 60 * 60 * 1000, // 7 dÃ­as (Persistencia larga)
Â  Â  Â  });

Â  Â  Â  // 3. Login exitoso: Devolver SOLO los datos del usuario al frontend
Â  Â  Â  res.status(200).json(user);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error interno en login:', error);
Â  Â  Â  res.status(500).json({ error: 'Error interno del servidor' });
Â  Â  }
Â  },

Â  // ===============================
Â  // Obtener perfil autenticado
Â  // ===============================
Â  getAuthProfile: (req, res) => {
Â  Â  // Si el authMiddleware pasÃ³, req.user ya estÃ¡ poblado.
Â  Â  const { id, correo, nombre, apellido, rol } = req.user;
Â  Â  res.status(200).json({ id, correo, nombre, apellido, rol });
Â  },

Â  // ===============================
Â  // Cerrar sesiÃ³n
Â  // ===============================
Â  logout: (req, res) => {
Â  Â  // AsegÃºrate de usar los mismos parÃ¡metros de configuraciÃ³n para clearCookie, 
Â  Â  // ya que el dominio y path son importantes para que el navegador la encuentre y la borre.
Â  Â  res.clearCookie('accessToken', { ...cookieConfig, maxAge: 0 });
Â  Â  res.clearCookie('refreshToken', { ...cookieConfig, maxAge: 0 });
Â  Â  res.status(200).json({ message: 'SesiÃ³n cerrada exitosamente' });
Â  },

Â  // ===============================
Â  // Obtener perfil de usuario (COMPLETO)
Â  // ===============================
Â  getProfile: async (req, res) => {
Â  Â  try {
Â  Â  Â  // âœ… LÃ³gica Correcta: Usamos req.user.id (el ID del token) que es mÃ¡s seguro
Â  Â  Â  const userId = req.user.id;
Â  Â  Â  const profile = await UserService.getUserProfile(userId);
Â  Â  Â  res.status(200).json(profile);
Â  Â  } catch (error) {
Â  Â  Â  res.status(404).json({ error: 'Perfil no encontrado' });
Â  Â  }
Â  },

Â  // ===============================
Â  // ðŸš€ Actualizar perfil de usuario
Â  // ===============================
Â  updateProfile: async (req, res) => {
Â  Â  try {
Â  Â  Â  const userId = req.user.id;
Â  Â  Â  const updatedUser = await UserService.updateUserProfile(userId, req.body);
Â  Â  Â  res.status(200).json(updatedUser);
Â  Â  } catch (error) {
Â  Â  Â  res.status(400).json({ error: error.message });
Â  Â  }
Â  },

Â  // ===============================
Â  // ðŸš€ Actualizar contraseÃ±a
Â  // ===============================
Â  updatePassword: async (req, res) => {
Â  Â  try {
Â  Â  Â  const userId = req.user.id;
Â  Â  Â  const { currentPassword, newPassword } = req.body;

Â  Â  Â  if (!currentPassword || !newPassword) {
Â  Â  Â  Â  return res.status(400).json({ error: 'ContraseÃ±a actual y nueva son requeridas.' });
Â  Â  Â  }

Â  Â  Â  await UserService.updateUserPassword(userId, currentPassword, newPassword);

Â  Â  Â  // Al cambiar la contraseÃ±a, eliminamos la sesiÃ³n actual por seguridad
Â  Â  Â  res.clearCookie('accessToken', { ...cookieConfig, maxAge: 0 });
Â  Â  Â  res.clearCookie('refreshToken', { ...cookieConfig, maxAge: 0 });

Â  Â  Â  res.status(200).json({
Â  Â  Â  Â  message: 'ContraseÃ±a actualizada exitosamente. Por favor, vuelve a iniciar sesiÃ³n.',
Â  Â  Â  });
Â  Â  } catch (error) {
Â  Â  Â  if (error.message === 'ContraseÃ±a actual incorrecta') {
Â  Â  Â  Â  return res.status(401).json({ error: error.message });
Â  Â  Â  }
Â  Â  Â  res.status(400).json({ error: error.message });
Â  Â  }
Â  },
};